package com.alten.ask.view.comp;

import java.util.List;

import com.alten.ask.AskAbstractStaticAttributes;
import com.alten.ask.AskAbstractStaticMethods;
import com.alten.ask.AskException;
import com.alten.ask.logic.AskLogic;
import com.alten.ask.model.orm.AskUser;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.shared.ui.label.ContentMode;
import com.vaadin.ui.AbstractComponent;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.VerticalLayout;

public class AskCompSections extends CustomComponent implements AskCompInterface {

	private static final long serialVersionUID = 1L;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private VerticalLayout mainLayout;
	private Label label_1;
	private Button buttonHome;
	private Button buttonAddToCart;
	private Button buttonInvoices;
	private Button buttonCart;
	private Button buttonRemove;
	private Button buttonPurchase;
	private Button buttonTx;

	private final AskLogic askLogic;

	public AskCompSections(AskLogic askLogic) throws AskException {
		this.askLogic = askLogic;
		buildMainLayout();
		setCompositionRoot(mainLayout);
		this.label_1.setContentMode(ContentMode.HTML);
		this.doAddProduct();
	}

	@Override
	public void init() throws AskException {
		this.setButtonCaptions();
		AskAbstractStaticMethods.addClick(this.askLogic, AskAbstractStaticAttributes.NO_USER, this.buttonHome, this,
				AskActionType.navigateToHome);
		AskAbstractStaticMethods.addClick(this.askLogic, AskAbstractStaticAttributes.NO_USER, this.buttonAddToCart,
				this, AskActionType.doAddProduct);
		AskAbstractStaticMethods.addClick(this.askLogic, AskAbstractStaticAttributes.NO_USER, this.buttonInvoices,
				this, AskActionType.navigateToInvoices);
		AskAbstractStaticMethods.addClick(this.askLogic, AskAbstractStaticAttributes.NO_USER, this.buttonCart, this,
				AskActionType.navigateToCart);
		AskAbstractStaticMethods.addClick(this.askLogic, AskAbstractStaticAttributes.NO_USER, this.buttonRemove, this,
				AskActionType.doRemoveProduct);
		AskAbstractStaticMethods.addClick(this.askLogic, AskAbstractStaticAttributes.NO_USER, this.buttonPurchase,
				this, AskActionType.doPurchase);
		AskAbstractStaticMethods.addClick(this.askLogic, AskAbstractStaticAttributes.NO_USER, this.buttonTx, this,
				AskActionType.navigateToTx);
	}

	public void postLogin() throws AskException {
	}

	public void postLogout() throws AskException {
	}

	@Override
	public void addCompsForLoggedUser(List<AbstractComponent> listComponentForLoggedUser) throws AskException {
	}

	@Override
	public void addCompsForNoUser(List<AbstractComponent> listComponentForNoUser) throws AskException {
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		// mainLayout.setStyleName("askVoid");
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// label_1
		label_1 = new Label();
		label_1.setImmediate(false);
		label_1.setWidth("-1px");
		label_1.setHeight("-1px");
		label_1.setValue("&nbsp;<BR />&nbsp;");
		mainLayout.addComponent(label_1);
		// mainLayout.setExpandRatio(label_1, 1.0f);
		mainLayout.setComponentAlignment(label_1, Alignment.TOP_RIGHT);

		// buttonHome
		buttonHome = new Button();
		buttonHome.setImmediate(true);
		buttonHome.setWidth("100.0%");
		buttonHome.setHeight("-1px");
		mainLayout.addComponent(buttonHome);
		mainLayout.setComponentAlignment(buttonHome, Alignment.TOP_RIGHT);

		// buttonAddToCart
		buttonAddToCart = new Button();
		buttonAddToCart.setImmediate(true);
		buttonAddToCart.setWidth("70.0%");
		buttonAddToCart.setHeight("-1px");
		mainLayout.addComponent(buttonAddToCart);
		mainLayout.setComponentAlignment(buttonAddToCart, Alignment.TOP_RIGHT);

		// buttonInvoices
		buttonInvoices = new Button();
		buttonInvoices.setImmediate(true);
		buttonInvoices.setWidth("100.0%");
		buttonInvoices.setHeight("-1px");
		mainLayout.addComponent(buttonInvoices);
		mainLayout.setComponentAlignment(buttonInvoices, Alignment.TOP_RIGHT);

		// buttonCart
		buttonCart = new Button();
		buttonCart.setImmediate(true);
		buttonCart.setWidth("100.0%");
		buttonCart.setHeight("-1px");
		mainLayout.addComponent(buttonCart);
		mainLayout.setComponentAlignment(buttonCart, Alignment.TOP_RIGHT);

		// buttonRemove
		buttonRemove = new Button();
		buttonRemove.setImmediate(true);
		buttonRemove.setWidth("70.0%");
		buttonRemove.setHeight("-1px");
		mainLayout.addComponent(buttonRemove);
		mainLayout.setComponentAlignment(buttonRemove, Alignment.TOP_RIGHT);

		// buttonPurchase
		buttonPurchase = new Button();
		buttonPurchase.setImmediate(true);
		buttonPurchase.setWidth("70.0%");
		buttonPurchase.setHeight("-1px");
		mainLayout.addComponent(buttonPurchase);
		mainLayout.setComponentAlignment(buttonPurchase, Alignment.TOP_RIGHT);

		// buttonTx
		buttonTx = new Button();
		buttonTx.setImmediate(true);
		buttonTx.setWidth("100.0%");
		buttonTx.setHeight("-1px");
		mainLayout.addComponent(buttonTx);
		mainLayout.setComponentAlignment(buttonTx, Alignment.TOP_RIGHT);

		return mainLayout;
	}

	private void setButtonCaptions() throws AskException {
		buttonHome.setCaption(this.askLogic.getResourceBundleString("button.home"));
		buttonHome.setDescription(buttonHome.getCaption());

		buttonAddToCart.setCaption(this.askLogic.getResourceBundleString("button.addToCart"));
		buttonAddToCart.setDescription(buttonAddToCart.getCaption());

		buttonInvoices.setCaption(this.askLogic.getResourceBundleString("button.invoices"));
		buttonInvoices.setDescription(buttonInvoices.getCaption());

		buttonCart.setCaption(this.askLogic.getResourceBundleString("button.cart"));
		buttonCart.setDescription(buttonCart.getCaption());

		buttonRemove.setCaption(this.askLogic.getResourceBundleString("button.remove"));
		buttonRemove.setDescription(buttonRemove.getCaption());

		buttonPurchase.setCaption(this.askLogic.getResourceBundleString("button.purchase"));
		buttonPurchase.setDescription(buttonPurchase.getCaption());

		buttonTx.setCaption(this.askLogic.getResourceBundleString("button.tx"));
		buttonTx.setDescription(buttonTx.getCaption());
	}

	@Override
	public void doClick(AskActionType askActionType) throws AskException {
		this.askLogic.doClick(askActionType);
	}

	@Override
	public void doEnter() throws AskException {
	}

	@Override
	public void onFocus(Object objectForOnFocus) throws AskException {
	}

	@Override
	public void doAction(AskActionType askActionType) throws AskException {
		AskUser askUser = this.askLogic.getAskUserFromSession();

		if (askUser == null) {
			this.setButtonCaptions();
			this.doAddProduct();
			this.setNoStyleNoVisible();
			this.buttonHome.setStyleName("askFontSelected");
			return;
		}

		switch (askActionType) {
		case navigateToHome:
			this.setButtonCaptions();
			this.doAddProduct();
			this.setNoStyleNoVisible();
			this.buttonHome.setStyleName("askFontSelected");
			this.buttonAddToCart.setVisible(true);
			break;
		case doAddProduct:
			this.doAddProduct();
			break;
		case navigateToInvoices:
			this.setButtonCaptions();
			this.doAddProduct();
			this.setNoStyleNoVisible();
			this.buttonInvoices.setStyleName("askFontSelected");
			break;
		case navigateToCart:
			this.setButtonCaptions();
			this.doAddProduct();
			this.setNoStyleNoVisible();
			this.buttonCart.setStyleName("askFontSelected");
			this.buttonRemove.setVisible(true);
			this.buttonPurchase.setVisible(true);
			break;
		case navigateToTx:
			this.setButtonCaptions();
			this.doAddProduct();
			this.setNoStyleNoVisible();
			this.buttonTx.setStyleName("askFontSelected");
			break;
		case doRemoveProduct:
			this.doAddProduct();
			break;
		case doPurchase:
			this.doAddProduct();
			break;
		case doLangEn:
			break;
		case doLangEs:
			break;
		case doLangIt:
			break;
		default:
			throw new AskException(this.askLogic, "Unknown askActionType " + askActionType, askUser.getUsername());
		}
	}

	private void setNoStyleNoVisible() {
		this.buttonHome.removeStyleName("askFontSelected");
		this.buttonInvoices.removeStyleName("askFontSelected");
		this.buttonCart.removeStyleName("askFontSelected");
		this.buttonTx.removeStyleName("askFontSelected");
		this.buttonAddToCart.setVisible(false);
		this.buttonRemove.setVisible(false);
		this.buttonPurchase.setVisible(false);
	}

	private void doAddProduct() throws AskException {
		if (this.askLogic.getAskUserFromSession() == null) {
			this.buttonCart.setCaption(this.askLogic.getResourceBundleString("button.cart"));
			return;
		}

		int size = this.askLogic.getAskInvoiceHeadFromSession().getAskInvoiceDetails().size();
		this.buttonCart.setCaption(this.askLogic.getResourceBundleString("button.cart") + " (" + size + ")");
	}

}