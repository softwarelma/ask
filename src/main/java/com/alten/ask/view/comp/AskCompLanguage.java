package com.alten.ask.view.comp;

import java.util.List;

import com.alten.ask.AskAbstractStaticAttributes;
import com.alten.ask.AskAbstractStaticMethods;
import com.alten.ask.AskException;
import com.alten.ask.logic.AskLogic;
import com.alten.ask.model.orm.AskUser;
import com.vaadin.server.ClassResource;
import com.vaadin.shared.ui.label.ContentMode;
import com.vaadin.ui.AbstractComponent;
import com.vaadin.ui.Button;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.themes.BaseTheme;

public class AskCompLanguage extends CustomComponent implements AskCompInterface {

	private static final long serialVersionUID = 1L;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private HorizontalLayout mainLayout;
	private Label label_1;
	private Button buttonEn;
	private Button buttonEs;
	private Button buttonIt;

	private final AskLogic askLogic;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public AskCompLanguage(AskLogic askLogic) {
		this.askLogic = askLogic;
		buildMainLayout();
		setCompositionRoot(mainLayout);
		this.label_1.setContentMode(ContentMode.HTML);

		this.buttonEn.addStyleName(BaseTheme.BUTTON_LINK);
		this.buttonEn.addStyleName("askButton");
		this.buttonEn.setIcon(new ClassResource("/com/alten/ask/view/comp/en.svg.png"));

		this.buttonEs.addStyleName(BaseTheme.BUTTON_LINK);
		this.buttonEs.addStyleName("askButton");
		this.buttonEs.setIcon(new ClassResource("/com/alten/ask/view/comp/es.svg.png"));

		this.buttonIt.addStyleName(BaseTheme.BUTTON_LINK);
		this.buttonIt.addStyleName("askButton");
		this.buttonIt.setIcon(new ClassResource("/com/alten/ask/view/comp/it.svg.png"));
	}

	private HorizontalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("-1px");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("-1px");
		setHeight("-1px");

		// label_1
		label_1 = new Label();
		label_1.setImmediate(false);
		label_1.setWidth("-1px");
		label_1.setHeight("-1px");
		label_1.setValue("&nbsp;");
		mainLayout.addComponent(label_1);
		// mainLayout.setExpandRatio(label_1, 1.0f);

		// buttonEn
		buttonEn = new Button();
		// buttonEn.setCaption();
		buttonEn.setImmediate(true);
		buttonEn.setWidth("-1px");
		buttonEn.setHeight("-1px");
		mainLayout.addComponent(buttonEn);

		// buttonEs
		buttonEs = new Button();
		// buttonEs.setCaption();
		buttonEs.setImmediate(true);
		buttonEs.setWidth("-1px");
		buttonEs.setHeight("-1px");
		mainLayout.addComponent(buttonEs);

		// buttonIt
		buttonIt = new Button();
		// buttonIt.setCaption();
		buttonIt.setImmediate(true);
		buttonIt.setWidth("-1px");
		buttonIt.setHeight("-1px");
		mainLayout.addComponent(buttonIt);

		return mainLayout;
	}

	@Override
	public void doAction(AskActionType askActionType) throws AskException {
	}

	@Override
	public void doEnter() throws AskException {
	}

	@Override
	public void onFocus(Object objectForOnFocus) throws AskException {
	}

	@Override
	public void doClick(AskActionType askActionType) throws AskException {
		switch (askActionType) {
		case doLangEn:
			this.askLogic.setDefaultLocale("en");
			break;
		case doLangEs:
			this.askLogic.setDefaultLocale("es");
			break;
		case doLangIt:
			this.askLogic.setDefaultLocale("it");
			break;
		default:
			AskUser askUser = this.askLogic.getAskUserFromSession();
			String username = askUser == null ? AskAbstractStaticAttributes.NO_USER : askUser.getUsername();
			throw new AskException(this.askLogic, username, "Unknown askActionType " + askActionType);
		}

		this.askLogic.doAction(this.askLogic.getAskActionTypeLastNavigate());
	}

	@Override
	public void init() throws AskException {
		AskAbstractStaticMethods.addClick(this.askLogic, AskAbstractStaticAttributes.NO_USER, this.buttonEn, this,
				AskActionType.doLangEn);
		AskAbstractStaticMethods.addClick(this.askLogic, AskAbstractStaticAttributes.NO_USER, this.buttonEs, this,
				AskActionType.doLangEs);
		AskAbstractStaticMethods.addClick(this.askLogic, AskAbstractStaticAttributes.NO_USER, this.buttonIt, this,
				AskActionType.doLangIt);
	}

	@Override
	public void addCompsForLoggedUser(List<AbstractComponent> listComponentForLoggedUser) throws AskException {
	}

	@Override
	public void addCompsForNoUser(List<AbstractComponent> listComponentForNoUser) throws AskException {
	}

}
